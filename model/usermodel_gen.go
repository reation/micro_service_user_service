// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), "=?,") + "=?"
)

var (
	STATES_NORMAL       int64 = 1
	STATES_FEOZEN       int64 = 2
	STATES_CANCEL       int64 = 3
	STATES_INTERDICTION int64 = 4
	STATES_AUDIT        int64 = 5

	MEMBER_YES	int64 = 1
	MEMBER_NO	int64 = 0
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id int64) error
		FindUserInfoByUserName(ctx context.Context, user_name string) (userInfo *User, err error)
		UpdateUserStates(ctx context.Context, id int64, states int64) error
		GetUserInfoByID(ctx context.Context, id int64) (userInfo *User, err error)
		GetNormalUserInfoByID(ctx context.Context, id int64) (userInfo *User, err error)
		FindUserinfoByNickName(ctx context.Context, nickname string) (userInfo *User, err error)
	}

	defaultUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	User struct {
		Id         int64     `db:"id"`
		UserName   string    `db:"user_name"`   // 用户名
		Password   string    `db:"password"`    // 密码
		Nickname   string    `db:"nickname"`    // 昵称
		Sex        int64     `db:"sex"`         // 性别 0:男 1:女
		Birthday   time.Time `db:"birthday"`    // 生日
		State      int64     `db:"state"`       // 状态 1:正常 2:冻结 3:注销 4:禁封 5:待审核
		IsMember   int64     `db:"is_member"`   // 是否是会员 0:否 1:是
		UpdateTime time.Time `db:"update_time"` // 更新时间
		CreateTime time.Time `db:"create_time"` // 创建时间
	}
)

func newUserModel(conn sqlx.SqlConn) *defaultUserModel {
	return &defaultUserModel{
		conn:  conn,
		table: "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	var resp User
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindUserInfoByUserName(ctx context.Context, user_name string) (*User, error) {
	query := fmt.Sprintf("select %s from %s where `user_name` = ? limit 1", userRows, m.table)
	var resp User
	err := m.conn.QueryRowCtx(ctx, &resp, query, user_name)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) GetUserInfoByID (ctx context.Context, id int64) (*User, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	var resp User
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) GetNormalUserInfoByID (ctx context.Context, id int64) (*User, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? and state = ? limit 1", userRows, m.table)
	var resp User
	err := m.conn.QueryRowCtx(ctx, &resp, query, id, 1)

	switch err {
	case nil:
		return &resp, nil
	case ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindUserinfoByNickName (ctx context.Context, nickname string) (*User, error) {
	query := fmt.Sprintf("select %s from %s where `nickname` = ? limit 1", userRows, m.table)
	var resp User
	err := m.conn.QueryRowCtx(ctx, &resp, query, nickname)
	switch err {
	case nil:
		return &resp, nil
	case ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserName, data.Password, data.Nickname, data.Sex, data.Birthday, data.State, data.IsMember)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, data *User) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserName, data.Password, data.Nickname, data.Sex, data.Birthday, data.State, data.IsMember, data.Id)
	return err
}

func (m *defaultUserModel) UpdateUserStates(ctx context.Context, id int64, states int64) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, "`states`")
	_, err := m.conn.ExecCtx(ctx, query, states, id)
	return err
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
