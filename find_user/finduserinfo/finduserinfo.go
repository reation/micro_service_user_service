// Code generated by goctl. DO NOT EDIT.
// Source: find_user_info.proto

package finduserinfo

import (
	"context"

	"github.com/reation/micro_service_user_service/protoc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ByNickNameRequest       = protoc.ByNickNameRequest
	ByNickNameResponse      = protoc.ByNickNameResponse
	ByUserNameRequest       = protoc.ByUserNameRequest
	ByUserNameResponse      = protoc.ByUserNameResponse
	CheckUserMemberRequest  = protoc.CheckUserMemberRequest
	CheckUserMemberResponse = protoc.CheckUserMemberResponse
	UserData                = protoc.UserData

	FindUserInfo interface {
		FindUserInfoByUserName(ctx context.Context, in *ByUserNameRequest, opts ...grpc.CallOption) (*ByUserNameResponse, error)
		FindUserInfoByNickName(ctx context.Context, in *ByNickNameRequest, opts ...grpc.CallOption) (*ByNickNameResponse, error)
		CheckUserMemberById(ctx context.Context, in *CheckUserMemberRequest, opts ...grpc.CallOption) (*CheckUserMemberResponse, error)
	}

	defaultFindUserInfo struct {
		cli zrpc.Client
	}
)

func NewFindUserInfo(cli zrpc.Client) FindUserInfo {
	return &defaultFindUserInfo{
		cli: cli,
	}
}

func (m *defaultFindUserInfo) FindUserInfoByUserName(ctx context.Context, in *ByUserNameRequest, opts ...grpc.CallOption) (*ByUserNameResponse, error) {
	client := protoc.NewFindUserInfoClient(m.cli.Conn())
	return client.FindUserInfoByUserName(ctx, in, opts...)
}

func (m *defaultFindUserInfo) FindUserInfoByNickName(ctx context.Context, in *ByNickNameRequest, opts ...grpc.CallOption) (*ByNickNameResponse, error) {
	client := protoc.NewFindUserInfoClient(m.cli.Conn())
	return client.FindUserInfoByNickName(ctx, in, opts...)
}

func (m *defaultFindUserInfo) CheckUserMemberById(ctx context.Context, in *CheckUserMemberRequest, opts ...grpc.CallOption) (*CheckUserMemberResponse, error) {
	client := protoc.NewFindUserInfoClient(m.cli.Conn())
	return client.CheckUserMemberById(ctx, in, opts...)
}
