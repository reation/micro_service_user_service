// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: user_register.proto

package protoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserRegisterOrCancelClient is the client API for UserRegisterOrCancel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRegisterOrCancelClient interface {
	UserRegister(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	UserCancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error)
}

type userRegisterOrCancelClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRegisterOrCancelClient(cc grpc.ClientConnInterface) UserRegisterOrCancelClient {
	return &userRegisterOrCancelClient{cc}
}

func (c *userRegisterOrCancelClient) UserRegister(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/user_register.user_register_or_cancel/userRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRegisterOrCancelClient) UserCancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error) {
	out := new(CancelResponse)
	err := c.cc.Invoke(ctx, "/user_register.user_register_or_cancel/userCancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRegisterOrCancelServer is the server API for UserRegisterOrCancel service.
// All implementations must embed UnimplementedUserRegisterOrCancelServer
// for forward compatibility
type UserRegisterOrCancelServer interface {
	UserRegister(context.Context, *RegisterRequest) (*RegisterResponse, error)
	UserCancel(context.Context, *CancelRequest) (*CancelResponse, error)
	mustEmbedUnimplementedUserRegisterOrCancelServer()
}

// UnimplementedUserRegisterOrCancelServer must be embedded to have forward compatible implementations.
type UnimplementedUserRegisterOrCancelServer struct {
}

func (UnimplementedUserRegisterOrCancelServer) UserRegister(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedUserRegisterOrCancelServer) UserCancel(context.Context, *CancelRequest) (*CancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCancel not implemented")
}
func (UnimplementedUserRegisterOrCancelServer) mustEmbedUnimplementedUserRegisterOrCancelServer() {}

// UnsafeUserRegisterOrCancelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRegisterOrCancelServer will
// result in compilation errors.
type UnsafeUserRegisterOrCancelServer interface {
	mustEmbedUnimplementedUserRegisterOrCancelServer()
}

func RegisterUserRegisterOrCancelServer(s grpc.ServiceRegistrar, srv UserRegisterOrCancelServer) {
	s.RegisterService(&UserRegisterOrCancel_ServiceDesc, srv)
}

func _UserRegisterOrCancel_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegisterOrCancelServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_register.user_register_or_cancel/userRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegisterOrCancelServer).UserRegister(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRegisterOrCancel_UserCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRegisterOrCancelServer).UserCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_register.user_register_or_cancel/userCancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRegisterOrCancelServer).UserCancel(ctx, req.(*CancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRegisterOrCancel_ServiceDesc is the grpc.ServiceDesc for UserRegisterOrCancel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRegisterOrCancel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_register.user_register_or_cancel",
	HandlerType: (*UserRegisterOrCancelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "userRegister",
			Handler:    _UserRegisterOrCancel_UserRegister_Handler,
		},
		{
			MethodName: "userCancel",
			Handler:    _UserRegisterOrCancel_UserCancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_register.proto",
}
