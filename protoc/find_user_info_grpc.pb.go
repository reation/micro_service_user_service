// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: find_user_info.proto

package protoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FindUserInfoClient is the client API for FindUserInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FindUserInfoClient interface {
	FindUserInfoByUserName(ctx context.Context, in *ByUserNameRequest, opts ...grpc.CallOption) (*ByUserNameResponse, error)
	FindUserInfoByNickName(ctx context.Context, in *ByNickNameRequest, opts ...grpc.CallOption) (*ByNickNameResponse, error)
	CheckUserMemberById(ctx context.Context, in *CheckUserMemberRequest, opts ...grpc.CallOption) (*CheckUserMemberResponse, error)
}

type findUserInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewFindUserInfoClient(cc grpc.ClientConnInterface) FindUserInfoClient {
	return &findUserInfoClient{cc}
}

func (c *findUserInfoClient) FindUserInfoByUserName(ctx context.Context, in *ByUserNameRequest, opts ...grpc.CallOption) (*ByUserNameResponse, error) {
	out := new(ByUserNameResponse)
	err := c.cc.Invoke(ctx, "/find_user_info.FindUserInfo/FindUserInfoByUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *findUserInfoClient) FindUserInfoByNickName(ctx context.Context, in *ByNickNameRequest, opts ...grpc.CallOption) (*ByNickNameResponse, error) {
	out := new(ByNickNameResponse)
	err := c.cc.Invoke(ctx, "/find_user_info.FindUserInfo/FindUserInfoByNickName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *findUserInfoClient) CheckUserMemberById(ctx context.Context, in *CheckUserMemberRequest, opts ...grpc.CallOption) (*CheckUserMemberResponse, error) {
	out := new(CheckUserMemberResponse)
	err := c.cc.Invoke(ctx, "/find_user_info.FindUserInfo/CheckUserMemberById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FindUserInfoServer is the server API for FindUserInfo service.
// All implementations must embed UnimplementedFindUserInfoServer
// for forward compatibility
type FindUserInfoServer interface {
	FindUserInfoByUserName(context.Context, *ByUserNameRequest) (*ByUserNameResponse, error)
	FindUserInfoByNickName(context.Context, *ByNickNameRequest) (*ByNickNameResponse, error)
	CheckUserMemberById(context.Context, *CheckUserMemberRequest) (*CheckUserMemberResponse, error)
	mustEmbedUnimplementedFindUserInfoServer()
}

// UnimplementedFindUserInfoServer must be embedded to have forward compatible implementations.
type UnimplementedFindUserInfoServer struct {
}

func (UnimplementedFindUserInfoServer) FindUserInfoByUserName(context.Context, *ByUserNameRequest) (*ByUserNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserInfoByUserName not implemented")
}
func (UnimplementedFindUserInfoServer) FindUserInfoByNickName(context.Context, *ByNickNameRequest) (*ByNickNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserInfoByNickName not implemented")
}
func (UnimplementedFindUserInfoServer) CheckUserMemberById(context.Context, *CheckUserMemberRequest) (*CheckUserMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserMemberById not implemented")
}
func (UnimplementedFindUserInfoServer) mustEmbedUnimplementedFindUserInfoServer() {}

// UnsafeFindUserInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FindUserInfoServer will
// result in compilation errors.
type UnsafeFindUserInfoServer interface {
	mustEmbedUnimplementedFindUserInfoServer()
}

func RegisterFindUserInfoServer(s grpc.ServiceRegistrar, srv FindUserInfoServer) {
	s.RegisterService(&FindUserInfo_ServiceDesc, srv)
}

func _FindUserInfo_FindUserInfoByUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FindUserInfoServer).FindUserInfoByUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/find_user_info.FindUserInfo/FindUserInfoByUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FindUserInfoServer).FindUserInfoByUserName(ctx, req.(*ByUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FindUserInfo_FindUserInfoByNickName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByNickNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FindUserInfoServer).FindUserInfoByNickName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/find_user_info.FindUserInfo/FindUserInfoByNickName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FindUserInfoServer).FindUserInfoByNickName(ctx, req.(*ByNickNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FindUserInfo_CheckUserMemberById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FindUserInfoServer).CheckUserMemberById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/find_user_info.FindUserInfo/CheckUserMemberById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FindUserInfoServer).CheckUserMemberById(ctx, req.(*CheckUserMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FindUserInfo_ServiceDesc is the grpc.ServiceDesc for FindUserInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FindUserInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "find_user_info.FindUserInfo",
	HandlerType: (*FindUserInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindUserInfoByUserName",
			Handler:    _FindUserInfo_FindUserInfoByUserName_Handler,
		},
		{
			MethodName: "FindUserInfoByNickName",
			Handler:    _FindUserInfo_FindUserInfoByNickName_Handler,
		},
		{
			MethodName: "CheckUserMemberById",
			Handler:    _FindUserInfo_CheckUserMemberById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "find_user_info.proto",
}
